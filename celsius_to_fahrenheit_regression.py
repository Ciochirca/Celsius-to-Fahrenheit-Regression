# -*- coding: utf-8 -*-
"""Celsius to Fahrenheit Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I1eQS8SU4weQ5uFgORnNoWr3MMW8RUg7

# Problem data

In this problem we will solve the conversion from Celsius degrees to Fahrenheit degrees with the help of machine learning. We will give TensorFlow some Celsius values and their matching Fahrenheit values. Afterwards we will train a model and train it and it will figure out the formula to solve the problem.

In this solution we use only one layer of neurons, which is not usually used in real life problems. We used only one because converting Celsius degrees to Fahrenheit degrees is linear and we know that.

**Note**

In general to solve problems involving machine learning people are using more layers to figure out the solution.

# Import dependencies

First we import dependencies we are importing [tensorflow](https://www.tensorflow.org/api_docs) as tf and we are telling it to only display errors, then we import [numpy](https://numpy.org/doc/stable/) to represent our data as a highly performant list.
"""

import tensorflow as tf
import numpy as np
import logging
import matplotlib.pyplot as plt
logger = tf.get_logger()
logger.setLevel(logging.ERROR)

"""# Set up training data

Supervised learning is all about figuring out an algorithm given a set of inputs and outputs, so here we set up our training data

Since our model will take Celsius degrees and output Fahrenheit degrees we need to make 2 arrays to train our model
"""

celsius_q = np.array([-10, 0, 8, 15, 22, 38], dtype=float)
fahrenheit_a = np.array([14, 32, 46, 59, 72, 100], dtype=float)

for i,c in enumerate(celsius_q):
  print("{} degrees Celsius = {} degrees Fahrenheit".format(c, fahrenheit_a[i]))

"""# Machine learning terminology

feature = input of our model
label = output our model predicts
example = a pair of input/output used during training

# Create the model

We will use simplest possible model we can, a Dense network. Since the problem is straightforward this network will require only a single layer with a single neuron.

# Build a layer
We can call the variable used to store the layer as "layer" and we can create it by instantiating tf.keras.layers.Dense with te following configuration:

* input_shape=[1] - this specifies that the input to this layer is a single 
value, which is the shape of a one-dimensional array with one member. Since this is the first and only layer, that input shape is the input shape of the entire model. The single value is a floating point number, representing degrees Celsius.

* units=1 - this specifies the number of neurons in the layer, which defines how many internal variables the layer has to try to learn how to solve the problem. Since this is the final layer, it is also the size of the model's output, a single float value representing degrees Fahrenheit.

In a multi-layered network, the size and shape of the later would need to match the input_shape of the next layer.
"""

layer = tf.keras.layers.Dense(units=1, input_shape=[1])

"""# Assemble layers into the model

Once layers are defined, they need to be assembled into a model. The sequential model definition takes a list of layers as an argument, specifying calculation order from the input to the output.

This model has a single layer, called "layer".
"""

model = tf.keras.Sequential([layer])

"""**Note**

you will often see the layers defined inside the model definition, rather than beforehand:

```python
model = tf.keras.Sequential([
  tf.keras.layers.Dense(units=1, input_shape=[1])
])
```

# Compile the model with loss and optimizer functions

Before training the model has to be compiled. When compiled for training the model is given a loss function and a optimizer function.
* loss function - a way of measuring how far off are predictions from desired outcome; the measured distance is called the "loss".
* optimizer function - a way of adjusting internal values to minimize the loss
"""

model.compile(loss='mean_squared_error', optimizer=tf.keras.optimizers.Adam(0.1))

"""These are used during training (below, model.fit function) to first calculate the loss at each point and then improve it. Actually the act of calculating the loss at each point and improving it is called training.

During training the optimizer function is used to calculate adjustments to model's internal variables. The goal is to adjust the internal variables until the model (which is actually a math function) mirrors the actual equation for converting Celsius to Fahrenheit.

The loss function ([mean squared error](https://en.wikipedia.org/wiki/Mean_squared_error)) and the optimizer function ([Adam](https://machinelearningmastery.com/adam-optimization-algorithm-for-deep-learning/)) used here are standard for simple models, but there are many others available.

One part of the optimizer you need to think about is the learning rate (0.1 in the above code). This is the step size taken when adjusting values for the model. If the value is too small it will take too many iterations to train the model, but if the value is too large then accuracy goes down. Finding a suited value usually is done by trial and error, but the range is usually between 0.1 and 0.001 (default value).

# Train the model

We can train the model by calling the fit method.

During the training, the model takes in Celsius values, performs a calculation using the current internal variables (called "weights") and outputs values which are meant to be Fahrenheit equvalent. Since the weights are initially set randomly, the output will not be close to the correct value. The difference between the actual output and the desired output is calculated using the loss function and the optimizer direct how the weights should be adjusted.

The cycle of calculate, compare, adjust is controlled by the fit method. The first argument is the input, the second is the output, the third argument, called "epochs", specifies how many times this cycle should be run and the last argument, called "verbose", controls how much output the method produces.
"""

history = model.fit(celsius_q, fahrenheit_a, epochs=500, verbose=False)
print("Finished training the model.");

"""# Display training statistics

The fit method returns a history object. We can use this object to plot how the loss of our model goes down after each training epoch. A high loss means that the Fahrenheit degrees the model predicts is far from the corresponding value in fahrenheit_a.

We'll use [Matplotlib](https://matplotlib.org/) to visualize this (other tools can be used too).
"""

plt.xlabel('Epoch Number')
plt.ylabel('Loss Magnitude')
plt.plot(history.history['loss'])

"""# Use the model to predict values

Now you have a model that has been trained to learn the relationship between celsius_q and fahrenheit_a. You can use the predict method to have it calculate the Fahrenheit degrees for a previously unknown Celsius degrees.
"""

print(model.predict([42.0]))

"""**To review**

* we created a model with a Dense Layer
* we trained it with 3500 examples (7 pairs over 500 epochs)

Our model tuned the variables (weights) in the Dense layer until it was able to return the correct Fahrenheit value for any Celsius value.

# Looking at the layer weights

Finally, let's print the internal variables of the Dense layer.
"""

print("These are the layer variables: {}".format(layer.get_weights()))

"""The first variable is close to ~1.8 and the second to ~32. These values (1.8 and 32) are the actual variables in the real world conversion formula.

This is really close to the values in the conversion formula. For a single neuron with a single input and a single output, the internal math looks the same as the equation for a line y = mx + b, which has the same form as the conversion of the equation f = 1.8C + 32 which is the conversion formula from Celsius to Fahrenheit.

Since the form is the same, the variables should converge on the standard values of 1.8 and 32, which is exactly what happened.

With additional neurons, additional inputs and additional outputs, the formula becomes much more complex but the idea is the same.
"""